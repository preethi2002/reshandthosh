<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Game Frontend</title>
    <style>
        body {
            margin: 0;
            overflow: hidden;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            background-color: #222;
            font-family: sans-serif;
            color: white;
            flex-direction: column;
        }
        #gameCanvas {
            background-color: #000;
            border: 2px solid #ccc;
        }
        #ui-panel {
            margin-top: 10px;
            font-size: 1.2em;
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas" width="800" height="600"></canvas>
    <div id="ui-panel">
        Score: <span id="score">0</span> | Status: <span id="status">Ready</span>
    </div>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const scoreDisplay = document.getElementById('score');
        const statusDisplay = document.getElementById('status');

        let player = {
            x: 50,
            y: 50,
            width: 30,
            height: 30,
            color: 'blue',
            speed: 5,
            score: 0
        };

        let obstacle = {
            x: 200,
            y: 150,
            width: 50,
            height: 50,
            color: 'red'
        };

        let collectible = {
            x: 400,
            y: 300,
            width: 20,
            height: 20,
            color: 'gold',
            collected: false
        };

        let keys = {};
        let animationFrameId;
        let animationTimer = 0;
        let animationSpeed = 0.1;

        document.addEventListener('keydown', (e) => {
            keys[e.key] = true;
        });

        document.addEventListener('keyup', (e) => {
            keys[e.key] = false;
        });

        function updatePlayerMovement() {
            if (keys['ArrowUp'] || keys['w']) player.y -= player.speed;
            if (keys['ArrowDown'] || keys['s']) player.y += player.speed;
            if (keys['ArrowLeft'] || keys['a']) player.x -= player.speed;
            if (keys['ArrowRight'] || keys['d']) player.x += player.speed;

            player.x = Math.max(0, Math.min(canvas.width - player.width, player.x));
            player.y = Math.max(0, Math.min(canvas.height - player.height, player.y));
        }

        function detectCollision(obj1, obj2) {
            return obj1.x < obj2.x + obj2.width &&
                   obj1.x + obj1.width > obj2.x &&
                   obj1.y < obj2.y + obj2.height &&
                   obj1.y + obj1.height > obj2.y;
        }

        function applyAnimations() {
            animationTimer += animationSpeed;
            if (animationTimer > 2 * Math.PI) {
                animationTimer = 0;
            }
            const colorIntensity = Math.sin(animationTimer) * 0.5 + 0.5;
            obstacle.color = `rgb(${Math.floor(255 * colorIntensity)}, 0, ${Math.floor(255 * (1 - colorIntensity))})`;

            const distanceX = Math.abs((player.x + player.width / 2) - (obstacle.x + obstacle.width / 2));
            const distanceY = Math.abs((player.y + player.height / 2) - (obstacle.y + obstacle.height / 2));
            const minDistance = Math.max(player.width, player.height) + Math.max(obstacle.width, obstacle.height);
            const proximity = 1 - Math.min(1, Math.sqrt(distanceX * distanceX + distanceY * distanceY) / (minDistance * 2));

            if (proximity > 0.1) {
                 const playerColorPulse = Math.sin(Date.now() / 100) * 0.2 + 0.8;
                 player.color = `rgb(0, 0, ${Math.floor(255 * playerColorPulse)})`;
            } else {
                 player.color = 'blue';
            }
        }

        function gameLoop() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            updatePlayerMovement();
            applyAnimations();

            if (detectCollision(player, obstacle)) {
                statusDisplay.textContent = 'Hit Obstacle!';
                player.color = 'purple';
                if (keys['ArrowUp'] || keys['w']) player.y += player.speed * 2;
                if (keys['ArrowDown'] || keys['s']) player.y -= player.speed * 2;
                if (keys['ArrowLeft'] || keys['a']) player.x += player.speed * 2;
                if (keys['ArrowRight'] || keys['d']) player.x -= player.speed * 2;

            } else {
                if (statusDisplay.textContent === 'Hit Obstacle!') {
                    statusDisplay.textContent = 'Ready';
                    player.color = 'blue';
                }
            }

            if (!collectible.collected && detectCollision(player, collectible)) {
                player.score += 10;
                scoreDisplay.textContent = player.score;
                collectible.collected = true;
                collectible.x = -100;
                statusDisplay.textContent = 'Collected!';
            }

            ctx.fillStyle = player.color;
            ctx.fillRect(player.x, player.y, player.width, player.height);

            ctx.fillStyle = obstacle.color;
            ctx.fillRect(obstacle.x, obstacle.y, obstacle.width, obstacle.height);

            if (!collectible.collected) {
                ctx.fillStyle = collectible.color;
                ctx.beginPath();
                ctx.arc(collectible.x + collectible.width / 2, collectible.y + collectible.height / 2, collectible.width / 2, 0, Math.PI * 2);
                ctx.fill();
            }

            animationFrameId = requestAnimationFrame(gameLoop);
        }

        gameLoop();
    </script>
</body>
</html>